{"version": null, "code": "gASVtw4AAAAAAAAoQyqXAHQBAAAAAAAAAAAAAGQBfA58EawCpgMAAKsDAAAAAAAAAAABAGQAUwCUKIwFaW5wdXSUjAZvdXRwdXSUjAZwYXJhbXOUjAl3aWxkY2FyZHOUjAd0aHJlYWRzlIwJcmVzb3VyY2VzlIwDbG9nlIwHdmVyc2lvbpSMBHJ1bGWUjAljb25kYV9lbnaUjA1jb250YWluZXJfaW1nlIwQc2luZ3VsYXJpdHlfYXJnc5SMD3VzZV9zaW5ndWxhcml0eZSMC2Vudl9tb2R1bGVzlIwMYmVuY2hfcmVjb3JklIwFam9iaWSUjAhpc19zaGVsbJSMD2JlbmNoX2l0ZXJhdGlvbpSMD2NsZWFudXBfc2NyaXB0c5SMCnNoYWRvd19kaXKUjA1lZGl0X25vdGVib29rlIwPY29uZGFfYmFzZV9wYXRolIwHYmFzZWRpcpSMGHJ1bnRpbWVfc291cmNlY2FjaGVfcGF0aJSMGF9faXNfc25ha2VtYWtlX3J1bGVfZnVuY5R0lF2UKE5YEQ0AAAogICAgICAgIGlkPXt3aWxkY2FyZHMuc2FtcGxlfQogICAgICAgIHR5cGVzPSh7cGFyYW1zLnR5cGVzfSkKICAgICAgICAKICAgICAgICAjIFRvdGFsIHJlYWRzIAogICAgICAgIHRvdGFsX3JlYWRzPSQoZWNobyAkKCggJCh3YyAtbCA8IHtpbnB1dC5wcmVfbWFwfSkgLyA0ICkpKQoKICAgICAgICAjIEZpbHRlcmVkIHJlYWRzIGFmdGVyIGxlbmd0aCBjaGVjayAKICAgICAgICBsZW5ndGhfZmlsdGVyZWRfcmVhZHM9JChlY2hvICQoKCAkKHdjIC1sIDwge2lucHV0LnBvc3RfbGVuZ3RofSkgLyA0ICkpKQogICAgICAgIAogICAgICAgICMgQ2xhc3NpZmllZCByZWFkcwogICAgICAgIHRvdGFsX3JlYWRzX2NsYXNzaWZpZWQ9JChlY2hvICQoKCAkKHdjIC1sIDwge2lucHV0LnBvc3RfY2xhc3NpfSkgLyA0ICkpKQogICAgICAgIAogICAgICAgICMgTWFwcGVkIHJlYWRzIGFmdGVyIGJ3YSAKICAgICAgICBtYXBwZWRfcmVhZHM9JChzYW10b29scyB2aWV3IC1jIC1GIDQge2lucHV0LnBvc3RfbWFwfSkKCiAgICAgICAgIyBPbi10YXJnZXQgcmVhZHMgd2l0aCBTTlAgcGFuZWwgCiAgICAgICAgb25fdGFyZ2V0X3JlYWRzPSQoc2FtdG9vbHMgdmlldyAtYyAtRiA0IHtpbnB1dC5wb3N0X21hcF9vbl90YXJnZXR9KQoKICAgICAgICAjIEZpbHRlcmVkIHJlYWRzIGFmdGVyIHF1YWxpdHkgY2hlY2sgCiAgICAgICAgdG90YWxfcmVhZHNfcG9zdF9tYXBfcWM9JChzYW10b29scyB2aWV3IC1jIHtpbnB1dC5wb3N0X21hcF9xY30pCiAgICAgICAgCiAgICAgICAgIyBVbmlxdWUgcmVhZHMKICAgICAgICB1bmlxdWVfcmVhZHM9JChzYW10b29scyB2aWV3IC1jIC1GIDQge2lucHV0LnBvc3RfbWFwX3FjX3JtZHVwfSkKICAgICAgICAKICAgICAgICAjIEF2ZXJhZ2UgZHVwbGljYXRpb24gcmF0ZSAKICAgICAgICBkdXBfcmF0ZT0kKGVjaG8gInNjYWxlPTI7ICR0b3RhbF9yZWFkc19wb3N0X21hcF9xYyAvICR1bmlxdWVfcmVhZHMiIHwgYmMpCgogICAgICAgICMgTnVtYmVyIG9mIFNOUHMgY292ZXJlZCAKICAgICAgICBpZiBbICJ7cGFyYW1zLnVzZV9zbnBfcGFuZWx9IiA9ICJUcnVlIiBdOyB0aGVuCiAgICAgICAgICAgIHNucHNfcmVjb3ZlcmVkPSQoYmVkdG9vbHMgaW50ZXJzZWN0IC1hIHtwYXJhbXMuc25wX3BhbmVsX2JlZH0gLWIge2lucHV0LnBvc3RfbWFwX3FjX3JtZHVwfSAtdSB8IHdjIC1sKQogICAgICAgIGVsc2UKICAgICAgICAgICAgc25wc19yZWNvdmVyZWQ9Ik5BIgogICAgICAgIGZpCiAgICAgICAgCiAgICAgICAgIyBEZWFtaW5hdGVkIHJlYWRzCiAgICAgICAgdG90YWxfcmVhZHNfZGVhbWluYXRlZD0kKHNhbXRvb2xzIHZpZXcgLWMge2lucHV0LmRlYW1pbmF0ZWRfYmFtfSkKICAgIAogICAgICAgICMgUHJvcG9ydGlvbiBkZWFtaW5hdGVkIChhbW9uZyBjbGFzc2lmaWVkIGhvbW8gc2FwaWVucykKICAgICAgICBwcm9wb3J0aW9uX2RlYW1pbmF0ZWQ9JChlY2hvICJzY2FsZT0zOyAkdG90YWxfcmVhZHNfZGVhbWluYXRlZCAvICR1bmlxdWVfcmVhZHMiIHwgYmMpIAogICAgICAgIAogICAgICAgICMgSW5pdGlhbGl6ZSB2YXJpYWJsZXMgdG8gc3RvcmUgcmVzdWx0cyBmb3IgZWFjaCB0eXBlCiAgICAgICAgcHJvcG9ydGlvbnM9IiIKICAgICAgICBwcm9wb3J0aW9uc19kZWFtaW5hdGVkPSIiCiAgICAgICAgcHJvcG9ydGlvbnNfaGVhZGVycz0iIgoKICAgICAgICBmb3IgdHlwZSBpbiAkdHlwZXM7IGRvCiAgICAgICAgICAgICMgUHJvcG9ydGlvbiBob21pbmluIGRlcml2ZWQgZm9yIHRoZSBjdXJyZW50IHR5cGUKICAgICAgICAgICAgcHJvcG9ydGlvbj0kKHB5dGhvbiB7cGFyYW1zLmNoZWNrX2FsdGVybmF0ZV9hbGxlbGV9IC1iIHtpbnB1dC5wb3N0X21hcF9xY19ybWR1cH0gLXYge3BhcmFtcy5saW5lYWdlX3NpdGVzfSAtdCAkdHlwZSkKICAgICAgICAgICAgcHJvcG9ydGlvbnM9IiRwcm9wb3J0aW9ucwkkcHJvcG9ydGlvbiIKICAgICAgICAgICAgcHJvcG9ydGlvbnNfaGVhZGVycz0iJHByb3BvcnRpb25zX2hlYWRlcnMJUGVyY2VudCAke3t0eXBlfX0gZGVyaXZlZCIKICAgICAgICBkb25lCgogICAgICAgIGZvciB0eXBlIGluICR0eXBlczsgZG8KICAgICAgICAgICAgIyBQcm9wb3J0aW9uIGhvbWluaW4gZGVyaXZlZCAoZGVhbWluYXRlZCBmcmFnbWVudHMpIGZvciB0aGUgY3VycmVudCB0eXBlCiAgICAgICAgICAgIHBfZGVhbWluYXRlZD0kKHB5dGhvbiB7cGFyYW1zLmNoZWNrX2FsdGVybmF0ZV9hbGxlbGV9IC1iIHtpbnB1dC5kZWFtaW5hdGVkX2JhbX0gLXYge3BhcmFtcy5saW5lYWdlX3NpdGVzfSAtdCAkdHlwZSkKICAgICAgICAgICAgcHJvcG9ydGlvbnNfZGVhbWluYXRlZD0iJHByb3BvcnRpb25zX2RlYW1pbmF0ZWQJJHBfZGVhbWluYXRlZCIKICAgICAgICAgICAgcHJvcG9ydGlvbnNfaGVhZGVycz0iJHByb3BvcnRpb25zX2hlYWRlcnMJUGVyY2VudCAke3t0eXBlfX0gZGVyaXZlZCBkZWFtaW5hdGVkIgogICAgICAgIGRvbmUKCiAgICAgICAgIyBGb3JtYXQgQyB0byBUIHBlcmNlbnRhZ2VzIGF0IDUnIGFuZCAzJyBlbmRzIGFzIHBlcmNlbnRhZ2VzIHdpdGggdHdvIGRlY2ltYWwgcG9pbnRzCiAgICAgICAgY3RfNT0kKGF3ayAtRicsJyAnTlI9PTIge3twcmludCAkMX19JyB7aW5wdXQucmVwb3J0X2ZpbGV9KQogICAgICAgIGN0XzM9JChhd2sgLUYnLCcgJ05SPT0yIHt7cHJpbnQgJDJ9fScge2lucHV0LnJlcG9ydF9maWxlfSkKICAgICAgICAKICAgICAgICAjIE91dHB1dCB0aGUgZmluYWwgcmVwb3J0CiAgICAgICAgZWNobyAtZSAiU2FtcGxlIElECVNlcXVlbmNlZCByZWFkcwlMZW5ndGggZmlsdGVyZWRcQWZ0ZXIgY2xhc3NpZmljYXRpb24JTWFwcGVkIHNlcXVlbmNlcwlPbi10YXJnZXQgc2VxdWVuY2VzCVF1YWxpdHkgZmlsdGVyZWQJVW5pcXVlIGZpbHRlcmVkCUF2ZXJhZ2UgZHVwbGljYXRpb24gcmF0ZQlOdW1iZXIgb2YgU05QcyBjb3ZlcmVkCVBlcmNlbnQgZGVhbWluYXRlZCRwcm9wb3J0aW9uc19oZWFkZXJzCTUnIEMtdG8tVCBzdWJzdGl0dXRpb24gZnJlcXVlbmN5IFslXSAoOTUlIENJKQkzJyBDLXRvLVQgc3Vic3RpdHV0aW9uIGZyZXF1ZW5jeSBbJV0gKDk1JSBDSSkiID4ge291dHB1dH0KICAgICAgICBlY2hvIC1lICIkaWQJJHRvdGFsX3JlYWRzCSRsZW5ndGhfZmlsdGVyZWRfcmVhZHMJJHRvdGFsX3JlYWRzX2NsYXNzaWZpZWQJJG1hcHBlZF9yZWFkcwkkb25fdGFyZ2V0X3JlYWRzCSR0b3RhbF9yZWFkc19wb3N0X21hcF9xYwkkdW5pcXVlX3JlYWRzCSRkdXBfcmF0ZQkkc25wc19yZWNvdmVyZWQJJHByb3BvcnRpb25fZGVhbWluYXRlZCRwcm9wb3J0aW9ucyRwcm9wb3J0aW9uc19kZWFtaW5hdGVkCSRjdF81CSRjdF8zIiA+PiB7b3V0cHV0fQogICAgICAgIJRoD2gShpRljAVzaGVsbJSFlHSULg==", "rule": "final_report", "input": ["0_data/example_reads_B.fq", "2_mapping/example_reads_B_LandMQ_filtered.bam", "2_mapping/example_reads_B_length_filtered_classified.bam", "2_mapping/example_reads_B_on_target.bam", "3_final_reads/example_reads_B_final.bam", "3_final_reads/example_reads_B_final_deaminated.bam", "temp/example_reads_B_ct_report.csv", "temp/example_reads_B_length_filtered.fq", "temp/example_reads_B_length_filtered_classified.fq"], "log": [], "params": ["''", "'../scripts/check_alternative_allele.py'", "'/global/home/users/jieruixu/jieruixu/sediment_dna/sedimix/final_pipeline/pendant_2023/probes_reich_n3_b8_CONTROL_BV09-BV09.transformed.txt'", "'hominin_informative'", "False"], "shellcmd": "\n        id=example_reads_B\n        types=(hominin_informative)\n        \n        # Total reads \n        total_reads=$(echo $(( $(wc -l < 0_data/example_reads_B.fq) / 4 )))\n\n        # Filtered reads after length check \n        length_filtered_reads=$(echo $(( $(wc -l < temp/example_reads_B_length_filtered.fq) / 4 )))\n        \n        # Classified reads\n        total_reads_classified=$(echo $(( $(wc -l < temp/example_reads_B_length_filtered_classified.fq) / 4 )))\n        \n        # Mapped reads after bwa \n        mapped_reads=$(samtools view -c -F 4 2_mapping/example_reads_B_length_filtered_classified.bam)\n\n        # On-target reads with SNP panel \n        on_target_reads=$(samtools view -c -F 4 2_mapping/example_reads_B_on_target.bam)\n\n        # Filtered reads after quality check \n        total_reads_post_map_qc=$(samtools view -c 2_mapping/example_reads_B_LandMQ_filtered.bam)\n        \n        # Unique reads\n        unique_reads=$(samtools view -c -F 4 3_final_reads/example_reads_B_final.bam)\n        \n        # Average duplication rate \n        dup_rate=$(echo \"scale=2; $total_reads_post_map_qc / $unique_reads\" | bc)\n\n        # Number of SNPs covered \n        if [ \"False\" = \"True\" ]; then\n            snps_recovered=$(bedtools intersect -a  -b 3_final_reads/example_reads_B_final.bam -u | wc -l)\n        else\n            snps_recovered=\"NA\"\n        fi\n        \n        # Deaminated reads\n        total_reads_deaminated=$(samtools view -c 3_final_reads/example_reads_B_final_deaminated.bam)\n    \n        # Proportion deaminated (among classified homo sapiens)\n        proportion_deaminated=$(echo \"scale=3; $total_reads_deaminated / $unique_reads\" | bc) \n        \n        # Initialize variables to store results for each type\n        proportions=\"\"\n        proportions_deaminated=\"\"\n        proportions_headers=\"\"\n\n        for type in $types; do\n            # Proportion hominin derived for the current type\n            proportion=$(python ../scripts/check_alternative_allele.py -b 3_final_reads/example_reads_B_final.bam -v /global/home/users/jieruixu/jieruixu/sediment_dna/sedimix/final_pipeline/pendant_2023/probes_reich_n3_b8_CONTROL_BV09-BV09.transformed.txt -t $type)\n            proportions=\"$proportions\t$proportion\"\n            proportions_headers=\"$proportions_headers\tPercent ${type} derived\"\n        done\n\n        for type in $types; do\n            # Proportion hominin derived (deaminated fragments) for the current type\n            p_deaminated=$(python ../scripts/check_alternative_allele.py -b 3_final_reads/example_reads_B_final_deaminated.bam -v /global/home/users/jieruixu/jieruixu/sediment_dna/sedimix/final_pipeline/pendant_2023/probes_reich_n3_b8_CONTROL_BV09-BV09.transformed.txt -t $type)\n            proportions_deaminated=\"$proportions_deaminated\t$p_deaminated\"\n            proportions_headers=\"$proportions_headers\tPercent ${type} derived deaminated\"\n        done\n\n        # Format C to T percentages at 5' and 3' ends as percentages with two decimal points\n        ct_5=$(awk -F',' 'NR==2 {print $1}' temp/example_reads_B_ct_report.csv)\n        ct_3=$(awk -F',' 'NR==2 {print $2}' temp/example_reads_B_ct_report.csv)\n        \n        # Output the final report\n        echo -e \"Sample ID\tSequenced reads\tLength filtered\\After classification\tMapped sequences\tOn-target sequences\tQuality filtered\tUnique filtered\tAverage duplication rate\tNumber of SNPs covered\tPercent deaminated$proportions_headers\t5' C-to-T substitution frequency [%] (95% CI)\t3' C-to-T substitution frequency [%] (95% CI)\" > 4_final_report/example_reads_B.tsv\n        echo -e \"$id\t$total_reads\t$length_filtered_reads\t$total_reads_classified\t$mapped_reads\t$on_target_reads\t$total_reads_post_map_qc\t$unique_reads\t$dup_rate\t$snps_recovered\t$proportion_deaminated$proportions$proportions_deaminated\t$ct_5\t$ct_3\" >> 4_final_report/example_reads_B.tsv\n        ", "incomplete": false, "starttime": 1738531184.0, "endtime": 1738531189.0, "job_hash": 1400111264217, "conda_env": null, "container_img_url": null, "input_checksums": {"3_final_reads/example_reads_B_final_deaminated.bam": "ab6859ce2d79031764875777b487a9f2fb66127a1567ab605645bb73492d0b06", "temp/example_reads_B_ct_report.csv": "9276bb1ec00d7b0811469ffd6efdc047360df13bdf12793ab4f32e23ecca74a9"}}